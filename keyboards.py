# keyboards.py
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict

def get_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="create_game")
    )
    keyboard.add(
        InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
        InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
    )
    return keyboard

def get_admin_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üÉè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏", callback_data="admin_cards"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    return keyboard


def get_game_lobby_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–æ–±–±–∏ –∏–≥—Ä—ã"""
    keyboard = InlineKeyboardMarkup(row_width=2)

    # –î–û–ë–ê–í–õ–ï–ù–û: –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö
    keyboard.add(InlineKeyboardButton("üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game"))

    if is_admin:
        keyboard.add(
            InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="game_settings")
        )

    keyboard.add(
        InlineKeyboardButton("üë• –ò–≥—Ä–æ–∫–∏", callback_data="show_players"),
        InlineKeyboardButton("üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="leave_game")
    )
    return keyboard


def get_character_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º"""
    keyboard = InlineKeyboardMarkup(row_width=2)

    cards = [
        ("üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è", "reveal_profession"),
        ("üë§ –ë–∏–æ–ª–æ–≥–∏—è", "reveal_biology"),
        ("ü´Å –ó–¥–æ—Ä–æ–≤—å–µ", "reveal_health"),
        ("üó£ –§–æ–±–∏—è", "reveal_phobia"),
        ("üéÆ –•–æ–±–±–∏", "reveal_hobby"),
        ("üîé –§–∞–∫—Ç", "reveal_fact"),
        ("üì¶ –ë–∞–≥–∞–∂", "reveal_baggage")
    ]

    for text, callback in cards:
        keyboard.add(InlineKeyboardButton(text, callback_data=callback))

    keyboard.add(InlineKeyboardButton("üÉè –°–ø–µ—Ü. –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="reveal_special_card"))
    keyboard.add(InlineKeyboardButton("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü. –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="use_special_card"))
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂", callback_data="show_my_character"))
    return keyboard

    if player.character and player.character.special_card_id and not player.special_card_used: #new
        keyboard.add(InlineKeyboardButton("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü. –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="use_special_card")) #new


def get_card_reveal_phase_keyboard(phase: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∞–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"""
    keyboard = InlineKeyboardMarkup(row_width=2)

    keyboard.add(
        InlineKeyboardButton("üÉè –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="manage_cards"),
        InlineKeyboardButton("üë• –ò–≥—Ä–æ–∫–∏", callback_data="show_game_players")
    )
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂", callback_data="show_my_character"))

    return keyboard

def get_voting_keyboard(players: List, current_user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
    for player in players:
        if hasattr(player, 'is_alive') and player.is_alive and hasattr(player, 'user_id') and player.user_id != current_user_id:
            text = f"üó≥Ô∏è {player.get_display_name()}"
            keyboard.add(InlineKeyboardButton(text, callback_data=f"vote_{player.user_id}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è
    keyboard.add(InlineKeyboardButton("ü§ê –í–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è", callback_data="abstain"))
    return keyboard


def __init__(self, chat_id: int, admin_id: int):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è ...
    self.first_voting_completed = False  # –ù–æ–≤–æ–µ –ø–æ–ª–µ


def get_cards_menu_inline_keyboard(chat_id: int, game_manager=None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –ø–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    if game_manager and chat_id in game_manager.games:
        game = game_manager.games[chat_id]
        if getattr(game, 'first_voting_completed', False):
            # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞
            bot_username = "bunker_nnkf_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            url = f"https://t.me/{bot_username}"
            keyboard.add(InlineKeyboardButton("üÉè –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url=url))
        else:
            # –î–æ –ø–µ—Ä–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            bot_username = "bunker_nnkf_bot"
            url = f"https://t.me/{bot_username}?start=cards_{chat_id}"
            keyboard.add(InlineKeyboardButton("üÉè –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏", url=url))
    else:
        # Fallback
        bot_username = "bunker_nnkf_bot"
        url = f"https://t.me/{bot_username}?start=cards_{chat_id}"
        keyboard.add(InlineKeyboardButton("üÉè –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏", url=url))

    return keyboard

def get_admin_cards_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    categories = [
        ("üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏", "edit_professions"),
        ("üë§ –ë–∏–æ–ª–æ–≥–∏—è", "edit_biology"),
        ("ü´Å –¢–µ–ª–æ", "edit_health_body"),
        ("ü¶† –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "edit_health_disease"),
        ("üó£ –§–æ–±–∏–∏", "edit_phobias"),
        ("üéÆ –•–æ–±–±–∏", "edit_hobbies"),
        ("üîé –§–∞–∫—Ç—ã", "edit_facts"),
        ("üì¶ –ë–∞–≥–∞–∂", "edit_baggage"),
        ("üÉè –°–ø–µ—Ü. –∫–∞—Ä—Ç–æ—á–∫–∏", "edit_special_cards"),
        ("üé≤ –°—Ü–µ–Ω–∞—Ä–∏–∏", "edit_scenarios")
    ]
    
    for text, callback in categories:
        keyboard.add(InlineKeyboardButton(text, callback_data=callback))
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
    return keyboard

def get_card_edit_keyboard(category: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{category}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{category}")
    )
    keyboard.add(
        InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data=f"show_{category}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_cards")
    )
    
    return keyboard


def get_game_phase_keyboard(phase: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –∏–≥—Ä—ã"""
    keyboard = InlineKeyboardMarkup(row_width=1)

    if phase in ["role_study", "card_reveal_1", "card_reveal_2", "card_reveal_3",
                 "card_reveal_4", "card_reveal_5", "card_reveal_6", "card_reveal_7"]:
        keyboard.add(InlineKeyboardButton("üÉè –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤ –õ–°", callback_data="manage_cards"))

    elif phase == "voting":
        keyboard.add(InlineKeyboardButton("üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –õ–°", callback_data="start_voting"))

    return keyboard

def get_confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{action}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}")
    )
    return keyboard

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard


def get_voting_inline_keyboard(chat_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    bot_username = "bunker_nnkf_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    url = f"https://t.me/{bot_username}?start=vote_{chat_id}"
    
    keyboard.add(InlineKeyboardButton("üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö", url=url))
    return keyboard

def get_private_voting_keyboard(players: List, current_user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
    for player in players:
        if hasattr(player, 'is_alive') and player.is_alive and hasattr(player, 'user_id') and player.user_id != current_user_id:
            text = f"üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ {player.get_display_name()}"
            keyboard.add(InlineKeyboardButton(text, callback_data=f"vote_{player.user_id}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è
    keyboard.add(InlineKeyboardButton("ü§ê –í–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è", callback_data="vote_abstain"))
    return keyboard


def get_private_character_keyboard(player, current_phase=None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ –õ–°"""
    keyboard = InlineKeyboardMarkup(row_width=3)

    if not player.character:
        return keyboard

    cards = []

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã
    if current_phase == "card_reveal_1":
        # –í –ø–µ—Ä–≤–æ–π —Ñ–∞–∑–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
        card_info = [("üíº", "reveal_profession", "profession")]
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–∑–∞—Ö –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        card_info = [
            ("üíº", "reveal_profession", "profession"),
            ("üë§", "reveal_biology", "biology"),
            ("ü´Å", "reveal_health", "health"),
            ("üó£", "reveal_phobia", "phobia"),
            ("üéÆ", "reveal_hobby", "hobby"),
            ("üîé", "reveal_fact", "fact"),
            ("üì¶", "reveal_baggage", "baggage")
        ]

    for emoji, callback, card_type in card_info:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞ –∏ –Ω–µ –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è –ª–∏ –∏–≥—Ä–æ–∫
        not_revealed = not player.character.revealed_cards.get(card_type, False)
        not_abstained = not getattr(player, f'abstained_card_{card_type}', False)

        if not_revealed and not_abstained:
            cards.append(InlineKeyboardButton(emoji, callback_data=callback))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(cards), 3):
        row = cards[i:i + 3]
        keyboard.row(*row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
    # keyboard.row(InlineKeyboardButton("ü§ê –í–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è", callback_data="abstain_card"))

    # –ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    if (player.character.special_card and
            hasattr(player, 'special_card_used') and
            not player.special_card_used):
        keyboard.row(InlineKeyboardButton("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∫–∞—Ä—Ç–æ—á–∫—É", callback_data="use_special_card"))

    # –ù–û–í–û–ï: –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    from config import GROUP_CHAT_ID
    if GROUP_CHAT_ID:
        keyboard.row(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/c/{abs(GROUP_CHAT_ID)}/1"))

    return keyboard

def get_cards_menu_inline_keyboard(chat_id: int, game_manager=None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –ø–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    if game_manager and chat_id in game_manager.games:
        game = game_manager.games[chat_id]
        if getattr(game, 'first_voting_completed', False):
            # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞
            bot_username = "bunker_nnkf_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            url = f"https://t.me/{bot_username}"
            keyboard.add(InlineKeyboardButton("üÉè –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url=url))
        else:
            # –î–æ –ø–µ—Ä–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            bot_username = "bunker_nnkf_bot"
            url = f"https://t.me/{bot_username}?start=cards_{chat_id}"
            keyboard.add(InlineKeyboardButton("üÉè –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏", url=url))
    else:
        # Fallback
        bot_username = "bunker_nnkf_bot"
        url = f"https://t.me/{bot_username}?start=cards_{chat_id}"
        keyboard.add(InlineKeyboardButton("üÉè –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏", url=url))

    return keyboard