# special_cards.py
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –∫–æ–¥–æ–º
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –±–æ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

import random
from typing import Dict, List, Optional, Any
import logging

logger = logging.getLogger(__name__)

class SpecialCard:
    """–ö–ª–∞—Å—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
    
    def __init__(self, name: str, description: str, code: str, usage_count: int = 1):
        self.name = name
        self.description = description
        self.code = code
        self.usage_count = usage_count
        self.used = False
    
    def execute(self, game, player, bot, target_player=None, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if self.used and self.usage_count <= 0:
            return {"success": False, "message": "–ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"}
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            context = {
                'game': game,
                'player': player,
                'target_player': target_player,
                'bot': bot,
                'random': random,
                'logger': logger,
                'result': {"success": True, "message": "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"}
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏
            exec(self.code, context)
            
            # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            if self.usage_count > 0:
                self.usage_count -= 1
                if self.usage_count <= 0:
                    self.used = True
            
            return context.get('result', {"success": True, "message": "–ö–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {self.name}: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
SPECIAL_CARDS = {
    "swap_facts": SpecialCard(
        name="–û–±–º–µ–Ω —Ñ–∞–∫—Ç–∞–º–∏",
        description="–ü–æ–º–µ–Ω—è–π—Ç–µ—Å—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Ñ–∞–∫—Ç–æ–≤ —Å –ª—é–±—ã–º –Ω–µ–∏–∑–≥–Ω–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–æ–π —Ñ–∞–∫—Ç–∞",
        code="""
# –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
available_targets = []
for p in game.get_alive_players():
    if p.user_id != player.user_id and p.character and p.character.revealed_cards.get('fact', False):
        available_targets.append(p)

if not available_targets:
    result = {"success": False, "message": "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –¥–ª—è –æ–±–º–µ–Ω–∞"}
else:
    if target_player and target_player in available_targets:
        # –ú–µ–Ω—è–µ–º —Ñ–∞–∫—Ç—ã –º–µ—Å—Ç–∞–º–∏
        player_fact = player.character.fact
        target_fact = target_player.character.fact
        
        player.character.fact = target_fact
        target_player.character.fact = player_fact
        
        result = {
            "success": True, 
            "message": f"–§–∞–∫—Ç—ã –æ–±–º–µ–Ω–µ–Ω—ã —Å {target_player.get_display_name()}!",
            "public_message": f"üîÑ {player.get_display_name()} –æ–±–º–µ–Ω—è–ª—Å—è —Ñ–∞–∫—Ç–∞–º–∏ —Å {target_player.get_display_name()}!"
        }
    else:
        result = {
            "success": False, 
            "message": f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏: {', '.join([p.get_display_name() for p in available_targets])}"
        }
""",
        usage_count=1
    ),

    "shuffle_professions": SpecialCard(
        name="–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        description="–°–æ–±–µ—Ä–∏ –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —É –Ω–µ–∏–∑–≥–Ω–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–µ—Ä–µ–º–µ—à–∞–π –∏ –ø–µ—Ä–µ—Ä–∞–∑–¥–∞–π",
        code="""
# –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
open_professions = []
affected_players = []

for p in game.get_alive_players():
    if p.character and p.character.revealed_cards.get('profession', False):
        open_professions.append(p.character.profession)
        affected_players.append(p)

if len(open_professions) < 2:
    result = {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è"}
else:
    import random
    random.shuffle(open_professions)

    # –ü–µ—Ä–µ—Ä–∞–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    for i, p in enumerate(affected_players):
        p.character.profession = open_professions[i]

    affected_names = [p.get_display_name() for p in affected_players]
    result = {
        "success": True,
        "message": f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã —Å—Ä–µ–¥–∏ {len(affected_players)} –∏–≥—Ä–æ–∫–æ–≤!",
        "public_message": f"üîÄ {player.get_display_name()} –ø–µ—Ä–µ–º–µ—à–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–æ–≤: {', '.join(affected_names)}"
    }
""",
        usage_count=1
    ),

    "swap_professions": SpecialCard(
        name="–û–±–º–µ–Ω –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏",
        description="–ü–æ–º–µ–Ω—è–π—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –ª—é–±—ã–º –Ω–µ–∏–∑–≥–Ω–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        code="""
available_targets = []
for p in game.get_alive_players():
    if p.user_id != player.user_id and p.character and p.character.revealed_cards.get('profession', False):
        available_targets.append(p)

if not available_targets:
    result = {"success": False, "message": "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏ –¥–ª—è –æ–±–º–µ–Ω–∞"}
else:
    if target_player and target_player in available_targets:
        player_prof = player.character.profession
        target_prof = target_player.character.profession

        player.character.profession = target_prof
        target_player.character.profession = player_prof

        result = {
            "success": True, 
            "message": f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ–±–º–µ–Ω–µ–Ω—ã —Å {target_player.get_display_name()}!",
            "public_message": f"üîÑ {player.get_display_name()} –æ–±–º–µ–Ω—è–ª—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏ —Å {target_player.get_display_name()}!"
        }
    else:
        result = {
            "success": False, 
            "message": f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏: {', '.join([p.get_display_name() for p in available_targets])}"
        }
""",
        usage_count=1
    ),

    "double_vote": SpecialCard(
        name="–î–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å",
        description="–¢–≤–æ–π –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏",
        code="""
if not hasattr(player, 'double_vote_active'):
    player.double_vote_active = True
    result = {
        "success": True,
        "message": "–í–∞—à –≥–æ–ª–æ—Å —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞!",
        "public_message": f"üó≥Ô∏èüó≥Ô∏è {player.get_display_name()} –ø–æ–ª—É—á–∏–ª –¥–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å!"
    }
else:
    result = {"success": False, "message": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å"}
""",
        usage_count=1
    ),

    "pig_transformation": SpecialCard(
        name="–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–≤–∏–Ω—å—é",
        description="–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–≤–∏–Ω—å—ë–π –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞. –¢–µ–±—è –Ω–µ –º–æ–≥—É—Ç –∏–∑–≥–Ω–∞—Ç—å, –æ–¥–Ω–∞–∫–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞",
        code="""
if not hasattr(player, 'is_pig'):
    player.is_pig = True
    player.pig_immunity = True  # –ò–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –∏–∑–≥–Ω–∞–Ω–∏—è
    player.cannot_reveal = True  # –ù–µ –º–æ–∂–µ—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã

    result = {
        "success": True,
        "message": "–í—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏—Å—å –≤ —Å–≤–∏–Ω—å—é! –í–∞—Å –Ω–µ–ª—å–∑—è –∏–∑–≥–Ω–∞—Ç—å, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥.",
        "public_message": f"üê∑ {player.get_display_name()} –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ —Å–≤–∏–Ω—å—é –∏ –ø–æ–ª—É—á–∏–ª –∏–º–º—É–Ω–∏—Ç–µ—Ç!"
    }
else:
    result = {"success": False, "message": "–í—ã —É–∂–µ —Å–≤–∏–Ω—å—è!"}
""",
        usage_count=1
    ),

    "revenge_exile": SpecialCard(
        name="–ú–µ—Å—Ç—å –ø—Ä–∏ –∏–∑–≥–Ω–∞–Ω–∏–∏",
        description="–ï—Å–ª–∏ —Ç–µ–±—è –∏–∑–≥–Ω–∞–ª–∏, –∑–∞–±–µ—Ä–∏ —Å —Å–æ–±–æ–π –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
        code="""
if not hasattr(player, 'revenge_active'):
    player.revenge_active = True
    result = {
        "success": True,
        "message": "–ï—Å–ª–∏ –≤–∞—Å –∏–∑–≥–æ–Ω—è—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞!",
        "public_message": f"üíÄ {player.get_display_name()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –º–µ—Å—Ç—å –ø—Ä–∏ –∏–∑–≥–Ω–∞–Ω–∏–∏!"
    }
else:
    result = {"success": False, "message": "–ú–µ—Å—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}
""",
        usage_count=1
    ),

    "block_vote": SpecialCard(
        name="–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
        description="–í—ã–±–µ—Ä–∏ –Ω–µ–∏–∑–≥–Ω–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ",
        code="""
alive_players = [p for p in game.get_alive_players() if p.user_id != player.user_id]

if not alive_players:
    result = {"success": False, "message": "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"}
else:
    if target_player and target_player in alive_players:
        target_player.blocked_from_voting = True
        result = {
            "success": True,
            "message": f"{target_player.get_display_name()} –Ω–µ —Å–º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!",
            "public_message": f"üö´ {player.get_display_name()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è {target_player.get_display_name()}!"
        }
    else:
        available_targets = [p.get_display_name() for p in alive_players]
        result = {
            "success": False,
            "message": f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: {', '.join(available_targets)}"
        }
""",
        usage_count=1
    ),

    "reveal_random": SpecialCard(
        name="–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ",
        description="–†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
        code="""
# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
alive_players = [p for p in game.get_alive_players() if p.user_id != player.user_id]

if not alive_players:
    result = {"success": False, "message": "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"}
else:
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    target = random.choice(alive_players)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    unrevealed_cards = []
    for card_type, revealed in target.character.revealed_cards.items():
        if not revealed:
            unrevealed_cards.append(card_type)
    
    if not unrevealed_cards:
        result = {"success": False, "message": f"–£ {target.get_display_name()} –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã"}
    else:
        # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        card_to_reveal = random.choice(unrevealed_cards)
        target.character.revealed_cards[card_to_reveal] = True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        card_names = {
            'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
            'biology': '–ë–∏–æ–ª–æ–≥–∏—è', 
            'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
            'phobia': '–§–æ–±–∏—è',
            'hobby': '–•–æ–±–±–∏',
            'fact': '–§–∞–∫—Ç',
            'baggage': '–ë–∞–≥–∞–∂'
        }
        
        card_values = {
            'profession': target.character.profession,
            'biology': f"{target.character.gender} {target.character.age} –ª–µ—Ç",
            'health': f"{target.character.body_type}, {target.character.disease}",
            'phobia': target.character.phobia,
            'hobby': target.character.hobby,
            'fact': target.character.fact,
            'baggage': target.character.baggage
        }
        
        card_name = card_names.get(card_to_reveal, card_to_reveal)
        card_value = card_values.get(card_to_reveal, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        result = {
            "success": True,
            "message": f"–†–∞—Å–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ {card_name} –∏–≥—Ä–æ–∫–∞ {target.get_display_name()}: {card_value}",
            "public_message": f"üé¥ {player.get_display_name()} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã–ª –∫–∞—Ä—Ç–æ—á–∫—É {card_name} –∏–≥—Ä–æ–∫–∞ {target.get_display_name()}: {card_value}"
        }
""",
        usage_count=1
    ),
    
    "immunity": SpecialCard(
        name="–ò–º–º—É–Ω–∏—Ç–µ—Ç",
        description="–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
        code="""
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
if not hasattr(player, 'has_immunity'):
    player.has_immunity = True
    
    result = {
        "success": True,
        "message": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ!",
        "public_message": f"üõ°Ô∏è {player.get_display_name()} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫—É –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞!"
    }
else:
    result = {"success": False, "message": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç"}
""",
        usage_count=1
    ),
    
    "vote_steal": SpecialCard(
        name="–ö—Ä–∞–∂–∞ –≥–æ–ª–æ—Å–∞",
        description="–û—Ç–º–µ–Ω—è–µ—Ç –≥–æ–ª–æ—Å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å–µ–±–µ",
        code="""
# –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
voted_players = [p for p in game.get_alive_players() if p.has_voted and p.user_id != player.user_id]

if not voted_players:
    result = {"success": False, "message": "–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª"}
else:
    if target_player and target_player in voted_players:
        # –û—Ç–º–µ–Ω—è–µ–º –≥–æ–ª–æ—Å —Ü–µ–ª–∏
        if target_player.vote_target:
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            if target_player.vote_target in game.players:
                game.players[target_player.vote_target].votes_received = max(0, 
                    game.players[target_player.vote_target].votes_received - 1)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        target_player.has_voted = False
        target_player.vote_target = None
        
        result = {
            "success": True,
            "message": f"–ì–æ–ª–æ—Å {target_player.get_display_name()} –æ—Ç–º–µ–Ω–µ–Ω!",
            "public_message": f"üó≥Ô∏è {player.get_display_name()} –æ—Ç–º–µ–Ω–∏–ª –≥–æ–ª–æ—Å –∏–≥—Ä–æ–∫–∞ {target_player.get_display_name()}!"
        }
    else:
        available_targets = [p.get_display_name() for p in voted_players]
        result = {
            "success": False,
            "message": f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏: {', '.join(available_targets)}"
        }
""",
        usage_count=1
    ),
    
    "card_peek": SpecialCard(
        name="–ü–æ–¥–≥–ª—è–¥—ã–≤–∞–Ω–∏–µ",
        description="–£–∑–Ω–∞–π—Ç–µ –æ–¥–Ω—É –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ)",
        code="""
alive_players = [p for p in game.get_alive_players() if p.user_id != player.user_id]

if not alive_players:
    result = {"success": False, "message": "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"}
else:
    if target_player and target_player in alive_players:
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        unrevealed_cards = []
        for card_type, revealed in target_player.character.revealed_cards.items():
            if not revealed:
                unrevealed_cards.append(card_type)
        
        if not unrevealed_cards:
            result = {"success": False, "message": f"–£ {target_player.get_display_name()} –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã"}
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            card_to_peek = random.choice(unrevealed_cards)
            
            card_names = {
                'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
                'biology': '–ë–∏–æ–ª–æ–≥–∏—è',
                'health': '–ó–¥–æ—Ä–æ–≤—å–µ', 
                'phobia': '–§–æ–±–∏—è',
                'hobby': '–•–æ–±–±–∏',
                'fact': '–§–∞–∫—Ç',
                'baggage': '–ë–∞–≥–∞–∂'
            }
            
            card_values = {
                'profession': target_player.character.profession,
                'biology': f"{target_player.character.gender} {target_player.character.age} –ª–µ—Ç",
                'health': f"{target_player.character.body_type}, {target_player.character.disease}",
                'phobia': target_player.character.phobia,
                'hobby': target_player.character.hobby,
                'fact': target_player.character.fact,
                'baggage': target_player.character.baggage
            }
            
            card_name = card_names.get(card_to_peek, card_to_peek)
            card_value = card_values.get(card_to_peek, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            result = {
                "success": True,
                "message": f"–°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ {target_player.get_display_name()}: {card_name} - {card_value}",
                "public_message": f"üîç {player.get_display_name()} –ø–æ–¥–≥–ª—è–¥–µ–ª –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞ {target_player.get_display_name()}"
            }
    else:
        available_targets = [p.get_display_name() for p in alive_players]
        result = {
            "success": False,
            "message": f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: {', '.join(available_targets)}"
        }
""",
        usage_count=1
    ),

    "steal_profession": SpecialCard(
        name="–ö—Ä–∞–∂–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        description="–ó–∞–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π",
        code="""
# –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏
available_targets = []
for p in game.get_alive_players():
    if p.user_id != player.user_id and p.character and p.character.revealed_cards.get('profession', False):
        available_targets.append(p)

if not available_targets:
    result = {"success": False, "message": "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏ –¥–ª—è –∫—Ä–∞–∂–∏"}
else:
    if target_player and target_player in available_targets:
        # –ö—Ä–∞–¥–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        stolen_profession = target_player.character.profession
        target_player.character.profession = player.character.profession
        player.character.profession = stolen_profession

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if hasattr(game, 'game_manager') and hasattr(game.game_manager, 'save_player_cards'):
            game.game_manager.save_player_cards(game.chat_id)

        result = {
            "success": True,
            "message": f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∫—Ä–∞–¥–µ–Ω–∞ —É {target_player.get_display_name()}!",
            "public_message": f"üí∞ {player.get_display_name()} —É–∫—Ä–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —É {target_player.get_display_name()}!"
        }
    else:
        available_names = [p.get_display_name() for p in available_targets]
        result = {
            "success": False,
            "message": f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: {', '.join(available_names)}"
        }
""",
        usage_count=1
    ),

    "change_fact": SpecialCard(
        name="–°–º–µ–Ω–∞ —Ñ–∞–∫—Ç–∞",
        description="–°–º–µ–Ω–∏ —Å–≤–æ–π —Ñ–∞–∫—Ç –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã",
        code="""
import random

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ–≤
facts_list = game.game_manager.cards_data.get('facts', [])

if not facts_list:
    result = {"success": False, "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã"}
else:
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—Ç
    available_facts = [f for f in facts_list if f != player.character.fact]

    if not available_facts:
        result = {"success": False, "message": "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã"}
    else:
        old_fact = player.character.fact
        new_fact = random.choice(available_facts)
        player.character.fact = new_fact

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if hasattr(game, 'game_manager') and hasattr(game.game_manager, 'save_player_cards'):
            game.game_manager.save_player_cards(game.chat_id)

        result = {
            "success": True,
            "message": f"–§–∞–∫—Ç –∏–∑–º–µ–Ω–µ–Ω —Å '{old_fact}' –Ω–∞ '{new_fact}'",
            "public_message": f"üîÑ {player.get_display_name()} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π —Ñ–∞–∫—Ç!"
        }
""",
        usage_count=1
    ),

    "reveal_all_cards": SpecialCard(
        name="–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ",
        description="–†–∞—Å–∫—Ä–æ–π –≤—Å–µ —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ä–∞–∑—É",
        code="""
if not player.character:
    result = {"success": False, "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"}
else:
    # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    cards_revealed = []
    for card_type in ['profession', 'biology', 'health', 'phobia', 'hobby', 'fact', 'baggage']:
        if not player.character.revealed_cards.get(card_type, False):
            player.character.revealed_cards[card_type] = True
            cards_revealed.append(card_type)

    if not cards_revealed:
        result = {"success": False, "message": "–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã"}
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if hasattr(game, 'game_manager') and hasattr(game.game_manager, 'save_player_cards'):
            game.game_manager.save_player_cards(game.chat_id)

        card_names = {
            'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
            'biology': '–ë–∏–æ–ª–æ–≥–∏—è',
            'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
            'phobia': '–§–æ–±–∏—è', 
            'hobby': '–•–æ–±–±–∏',
            'fact': '–§–∞–∫—Ç',
            'baggage': '–ë–∞–≥–∞–∂'
        }

        revealed_names = [card_names.get(ct, ct) for ct in cards_revealed]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        character_info = player.get_character_info(show_all=True)

        result = {
            "success": True,
            "message": f"–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã: {', '.join(revealed_names)}",
            "public_message": f"üí• {player.get_display_name()} —Ä–∞—Å–∫—Ä—ã–ª –≤—Å–µ —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏!\n\n{character_info}"
        }
""",
        usage_count=1
    ),

    "target_selector": SpecialCard(
        name="–í—ã–±–æ—Ä —Ü–µ–ª–∏",
        description="–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏",
        code="""
alive_players = [p for p in game.get_alive_players() if p.user_id != player.user_id]

if not alive_players:
    result = {"success": False, "message": "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"}
else:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏
    player.can_target_next = True

    available_names = [p.get_display_name() for p in alive_players]

    result = {
        "success": True,
        "message": f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏: {', '.join(available_names)}",
        "public_message": f"üéØ {player.get_display_name()} –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏!"
    }
""",
        usage_count=1
    )
}

def get_special_cards() -> Dict[str, SpecialCard]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    return SPECIAL_CARDS.copy()

def add_special_card(card_id: str, name: str, description: str, code: str, usage_count: int = 1) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    try:
        SPECIAL_CARDS[card_id] = SpecialCard(name, description, code, usage_count)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}: {e}")
        return False

def remove_special_card(card_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    try:
        if card_id in SPECIAL_CARDS:
            del SPECIAL_CARDS[card_id]
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}: {e}")
        return False

def save_special_cards():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª)"""
    try:
        import os
        import tempfile
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = '''# special_cards.py
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –∫–æ–¥–æ–º
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –±–æ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

import random
from typing import Dict, List, Optional, Any
import logging

logger = logging.getLogger(__name__)

class SpecialCard:
    """–ö–ª–∞—Å—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
    
    def __init__(self, name: str, description: str, code: str, usage_count: int = 1):
        self.name = name
        self.description = description
        self.code = code
        self.usage_count = usage_count
        self.used = False
    
    def execute(self, game, player, bot, target_player=None, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if self.used and self.usage_count <= 0:
            return {"success": False, "message": "–ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"}
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            context = {
                'game': game,
                'player': player,
                'target_player': target_player,
                'bot': bot,
                'random': random,
                'logger': logger,
                'result': {"success": True, "message": "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"}
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏
            exec(self.code, context)
            
            # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            if self.usage_count > 0:
                self.usage_count -= 1
                if self.usage_count <= 0:
                    self.used = True
            
            return context.get('result', {"success": True, "message": "–ö–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {self.name}: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
SPECIAL_CARDS = {
'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for card_id, card in SPECIAL_CARDS.items():
            file_content += f'    "{card_id}": SpecialCard(\n'
            file_content += f'        name="{card.name}",\n'
            file_content += f'        description="{card.description}",\n'
            file_content += f'        code="""{card.code}""",\n'
            file_content += f'        usage_count={card.usage_count}\n'
            file_content += f'    ),\n'
        
        file_content += '''}\n\ndef get_special_cards() -> Dict[str, SpecialCard]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    return SPECIAL_CARDS.copy()

def add_special_card(card_id: str, name: str, description: str, code: str, usage_count: int = 1) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    try:
        SPECIAL_CARDS[card_id] = SpecialCard(name, description, code, usage_count)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}: {e}")
        return False

def remove_special_card(card_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    try:
        if card_id in SPECIAL_CARDS:
            del SPECIAL_CARDS[card_id]
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}: {e}")
        return False

def save_special_cards():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª)"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    pass
'''
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        current_file = __file__
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º
        with tempfile.NamedTemporaryFile(mode='w', delete=False, encoding='utf-8') as tmp:
            tmp.write(file_content)
            tmp_name = tmp.name
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
        os.replace(tmp_name, current_file)
        
        logger.info("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
        return False
