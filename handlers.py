# handlers.py
import logging
from typing import Dict, Any
from telebot.types import Message, CallbackQuery
from game_manager import GamePhase
import time
import os

from keyboards import *
from config import ADMIN_IDS, ALLOWED_CHAT_ID, MESSAGE_DELAY, BOT_IMAGES
from config import GAME_SETTINGS
from special_cards import get_special_cards, add_special_card, remove_special_card, save_special_cards  # new
from config import ALLOWED_CHAT_ID
import game_manager

logger = logging.getLogger(__name__)


class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤ –±–æ—Ç–∞"""

    def __init__(self, bot, game_manager):
        self.bot = bot
        self.game_manager = game_manager
        self.user_states: Dict[int, Dict[str, Any]] = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def _send_message_with_image(self, chat_id: int, text: str, image_key: str = None, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ë–ï–ó –∑–∞–¥–µ—Ä–∂–∫–∏ (–¥–ª—è –∫–æ–º–∞–Ω–¥)"""

        try:
            image_path = BOT_IMAGES.get(image_key, '') if image_key else ''

            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    self.bot.send_photo(
                        chat_id,
                        photo=photo,
                        caption=text,
                        **kwargs
                    )
            else:
                self.bot.send_message(chat_id, text, **kwargs)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                self.bot.send_message(chat_id, text, **kwargs)
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""

        # –ö–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start'])(self.start_command)
        self.bot.message_handler(commands=['help'])(self.help_command)
        self.bot.message_handler(commands=['game'])(self.game_command)
        self.bot.message_handler(commands=['admin'])(self.admin_command)
        self.bot.message_handler(commands=['stop'])(self.stop_command)

        # –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´:
        self.bot.message_handler(commands=['begin', 'startgame'])(self.begin_game_command)
        self.bot.message_handler(commands=['end', 'endgame'])(self.end_game_command)
        self.bot.message_handler(commands=['leave'])(self.leave_game_command)

        # –ö–æ–ª–±—ç–∫–∏
        self.bot.callback_query_handler(func=lambda call: True)(self.callback_handler)

        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.bot.message_handler(content_types=['text'])(self.text_handler)

    def begin_game_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /begin (–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É)"""
        try:
            if message.chat.type not in ['group', 'supergroup']:
                self.bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
                return

            chat_id = message.chat.id
            user_id = message.from_user.id

            if chat_id not in self.game_manager.games:
                self.bot.send_message(chat_id, "‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
                return

            game = self.game_manager.games[chat_id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            if user_id != game.admin_id:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –Ω–∞—á–∞—Ç—å.")
                return

            # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            if self.game_manager.start_game(chat_id, user_id):
                self._send_message_with_image(chat_id, "üé≠ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ò–∑—É—á–∞–π—Ç–µ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π." 'game_start')
            else:
                self.bot.send_message(
                    chat_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ù—É–∂–Ω–æ {GAME_SETTINGS['MIN_PLAYERS']}-{GAME_SETTINGS['MAX_PLAYERS']} –∏–≥—Ä–æ–∫–æ–≤."
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ begin_game_command: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã.")

    def _check_chat_allowed(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç"""
        if ALLOWED_CHAT_ID is None:
            return True
        return chat_id == ALLOWED_CHAT_ID

    def end_game_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /end (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ)"""
        try:
            if message.chat.type not in ['group', 'supergroup']:
                self.bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
                return

            chat_id = message.chat.id
            user_id = message.from_user.id

            if chat_id not in self.game_manager.games:
                self.bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
                return

            game = self.game_manager.games[chat_id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–∞–¥–º–∏–Ω –∏–≥—Ä—ã –∏–ª–∏ –±–æ—Ç–∞)
            if user_id != game.admin_id and user_id not in ADMIN_IDS:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            self.game_manager.phase_timer.stop_phase_timer(chat_id)

            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
            del self.game_manager.games[chat_id]

            self.bot.send_message(chat_id, "‚õî –ò–≥—Ä–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ end_game_command: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.")

    def leave_game_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leave (–ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É)"""
        try:
            if message.chat.type not in ['group', 'supergroup']:
                self.bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
                return

            chat_id = message.chat.id
            user_id = message.from_user.id

            if chat_id not in self.game_manager.games:
                self.bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
                return

            game = self.game_manager.games[chat_id]

            if user_id not in game.players:
                self.bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã - –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–±–±–∏
            if game.phase != GamePhase.LOBBY:
                self.bot.send_message(
                    chat_id,
                    "‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É –ø–æ—Å–ª–µ –µ—ë –Ω–∞—á–∞–ª–∞. –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞."
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            player_name = game.players[user_id].get_display_name()

            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            if self.game_manager.leave_game(chat_id, user_id):
                self.bot.send_message(chat_id, f"üëã {player_name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É")

                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–¥–º–∏–Ω –∏–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤
                if user_id == game.admin_id or len(game.players) < GAME_SETTINGS['MIN_PLAYERS']:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
                    self.game_manager.phase_timer.stop_phase_timer(chat_id)
                    del self.game_manager.games[chat_id]
                    self._send_message_with_image(chat_id, "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤." 'game_end')
                else:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
                    if hasattr(game, 'lobby_message_id') and game.lobby_message_id:
                        self._send_lobby_status(chat_id, game.lobby_message_id)
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ leave_game_command: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã.")

    def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
            if len(message.text.split()) > 1:
                param = message.text.split()[1]
                if param.startswith('vote_'):
                    chat_id = int(param.replace('vote_', ''))
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —á–∞—Ç
                    if not self._check_chat_allowed(chat_id):
                        self.bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                        return
                    self._handle_voting_start_param(message, chat_id)
                    return
                elif param.startswith('cards_'):
                    chat_id = int(param.replace('cards_', ''))
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —á–∞—Ç
                    if not self._check_chat_allowed(chat_id):
                        self.bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                        return
                    self._handle_cards_start_param(message, chat_id)
                    return

            welcome_text = "üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bunker RP!**\n\n"
            welcome_text += "–≠—Ç–æ –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, "
            welcome_text += "–∫—Ç–æ –¥–æ—Å—Ç–æ–∏–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä –ø–æ—Å–ª–µ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞.\n\n"
            welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            keyboard = get_main_menu()

            if message.from_user.id in ADMIN_IDS:
                keyboard.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

            self._send_message_with_image(
                message.chat.id,
                welcome_text,
                image_key='lobby',
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            self.bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def _handle_cards_start_param(self, message: Message, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä /start"""
        user_id = message.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )
            return

        game = self.game_manager.games[chat_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ
        if user_id not in game.players:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ."
            )
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–Ω—é
        is_current_turn = (hasattr(game, 'current_turn_player_id') and
                           game.current_turn_player_id == user_id)

        if not is_current_turn and hasattr(game, 'current_turn_player_id') and game.current_turn_player_id:
            # –ù–µ –æ—á–µ—Ä–µ–¥—å —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            current_player = game.players.get(game.current_turn_player_id)
            current_name = current_player.get_display_name() if current_player else "–¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞"

            self.bot.send_message(
                user_id,
                f"‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏**\n\n–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: {current_name}\n–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏.",
                parse_mode='Markdown'
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞
        self._send_cards_menu_to_private(user_id, chat_id)

    def _handle_card_reveal_timeout(self, chat_id: int, card_number: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã"""
        if chat_id not in self.games:
            return

        game = self.games[chat_id]

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        game.current_player_index += 1

        if game.current_player_index >= len(game.players_order):
            # –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ—à–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ–∞–∑—É
            self._handle_card_phase_end(chat_id, card_number)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –∏–≥—Ä–æ–∫–æ–º
            self._start_card_reveal_phase(chat_id, card_number)

    def _send_cards_menu_to_private(self, user_id: int, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤ –õ–°"""
        if chat_id not in self.game_manager.games:
            return

        game = self.game_manager.games[chat_id]
        player = game.players.get(user_id)

        if not player:
            return

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É
        current_phase = game.phase.value if hasattr(game, 'phase') else None
        keyboard = get_private_character_keyboard(player, current_phase)

        if current_phase == "card_reveal_1":
            cards_text = "üé¥ **–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å! –§–∞–∑–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π**\n\n"
            cards_text += "–í –ø–µ—Ä–≤–æ–π —Ñ–∞–∑–µ –º–æ–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é."
        else:
            cards_text = "üÉè **–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å! –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n"
            cards_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤ –∏–≥—Ä–µ:"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        if not hasattr(self, 'user_states'):
            self.user_states = {}

        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['cards_chat'] = chat_id

        self.bot.send_message(
            user_id,
            cards_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_voting_start_param(self, message: Message, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä /start"""
        user_id = message.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )
            return

        game = self.game_manager.games[chat_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ
        if user_id not in game.players:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
        if game.phase.value != "voting":
            self.bot.send_message(
                message.chat.id,
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∂–∏–≤
        if not game.players[user_id].is_alive:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
        if game.players[user_id].has_voted:
            self.bot.send_message(
                message.chat.id,
                "‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        self._send_private_voting(user_id, chat_id)

    def _send_private_voting(self, user_id: int, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if chat_id not in self.game_manager.games:
            return

        game = self.game_manager.games[chat_id]

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ)
        alive_players = [p for p in game.get_alive_players() if p.user_id != user_id]

        if not alive_players:
            self.bot.send_message(user_id, "‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
            return

        from keyboards import get_private_voting_keyboard  # –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç
        keyboard = get_private_voting_keyboard(alive_players, user_id)

        voting_text = f"üó≥Ô∏è **–ì–û–õ–û–°–û–í–ê–ù–ò–ï**\n\n"
        voting_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ **–ò–°–ö–õ–Æ–ß–ò–¢–¨** –∏–∑ –±—É–Ω–∫–µ—Ä–∞:\n\n"

        for player in alive_players:
            voting_text += f"üë§ {player.get_display_name()}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        if not hasattr(self, 'user_states'):
            self.user_states = {}

        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['voting_chat'] = chat_id

        self.bot.send_message(
            user_id,
            voting_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

    /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    /game - –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
    /begin - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–≥—Ä—É (–∞–¥–º–∏–Ω)
    /end - –î–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (–∞–¥–º–∏–Ω)
    /leave - –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–æ –Ω–∞—á–∞–ª–∞)
    /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞)

    üéØ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
    1. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game –≤ –≥—Ä—É–ø–ø–µ
    2. –ù–∞–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    3. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /begin
    4. –ò–∑—É—á–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    5. –†–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –æ–±—Å—É–∂–¥–∞–π—Ç–µ
    6. –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    7. –ü–æ–±–µ–∂–¥–∞—é—Ç —Ç–µ, –∫—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –±—É–Ω–∫–µ—Ä!

    üìù **–§–∞–∑—ã –∏–≥—Ä—ã:**
    üé≠ –ò–∑—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    üé¥ –†–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ (7 —Ä–∞—É–Ω–¥–æ–≤)
    üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

            self.bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")

    def game_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /game"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —á–∞—Ç
            if not self._check_chat_allowed(message.chat.id):
                if message.chat.id < 0:  # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
                    self.bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                    try:
                        self.bot.leave_chat(message.chat.id)
                    except:
                        pass
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
            if message.chat.type not in ['group', 'supergroup']:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!"
                )
                return

            chat_id = message.chat.id
            user_id = message.from_user.id
            username = message.from_user.username
            first_name = message.from_user.first_name

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É
            if chat_id in self.game_manager.games:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                if self.game_manager.join_game(chat_id, user_id, username, first_name):
                    self.bot.send_message(
                        chat_id,
                        f"‚úÖ {first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!"
                    )
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–±–±–∏
                    game = self.game_manager.games[chat_id]
                    if hasattr(game, 'lobby_message_id') and game.lobby_message_id:
                        self._send_lobby_status(chat_id, game.lobby_message_id)
                else:
                    self.bot.send_message(
                        chat_id,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ."
                    )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                if self.game_manager.create_game(chat_id, user_id):
                    self.game_manager.join_game(chat_id, user_id, username, first_name)

                    game_text = f"üéÆ **–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    game_text += f"üëë –ê–¥–º–∏–Ω: {first_name}\n"
                    game_text += f"üë• –ò–≥—Ä–æ–∫–æ–≤: 1/{GAME_SETTINGS['MAX_PLAYERS']}\n\n"
                    game_text += "–ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤..."

                    keyboard = get_game_lobby_keyboard(is_admin=True)

                    message = self.bot.send_message(
                        chat_id,
                        game_text,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )

                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    game = self.game_manager.games[chat_id]
                    game.lobby_message_id = message.message_id
                else:
                    self.bot.send_message(
                        chat_id,
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã."
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ game_command: {e}")

    def admin_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        try:
            if message.from_user.id not in ADMIN_IDS:
                self.bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            admin_text = "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = get_admin_menu()

            self.bot.send_message(
                message.chat.id,
                admin_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_command: {e}")

    def stop_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        try:
            chat_id = message.chat.id
            user_id = message.from_user.id

            if chat_id not in self.game_manager.games:
                self.bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return

            game = self.game_manager.games[chat_id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–∞–¥–º–∏–Ω –∏–≥—Ä—ã –∏–ª–∏ –±–æ—Ç–∞)
            if user_id != game.admin_id and user_id not in ADMIN_IDS:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            self.game_manager.phase_timer.stop_phase_timer(chat_id)

            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
            del self.game_manager.games[chat_id]

            self._send_message_with_image(chat_id, "‚õî –ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", 'game_end')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_command: {e}")

    def callback_handler(self, call: CallbackQuery):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤"""
        try:
            callback_data = call.data
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            message_id = call.message.message_id

            # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            if callback_data == "create_game":
                self._handle_create_game(call)
            elif callback_data == "join_game":
                self._handle_join_game(call)
            elif callback_data == "rules":
                self._handle_rules(call)
            elif callback_data == "about":
                self._handle_about(call)
            elif callback_data == "manage_cards":
                self._handle_manage_cards(call)

            # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            elif callback_data == "admin_panel":
                self._handle_admin_panel(call)
            elif callback_data == "admin_cards":
                self._handle_admin_cards(call)
            elif callback_data == "edit_special":
                self._handle_edit_special_cards(call)
            elif callback_data == "admin_stats":
                self._handle_admin_stats(call)
            elif callback_data == "admin_back":
                self._handle_admin_panel(call)

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
            elif callback_data.startswith("edit_"):
                self._handle_edit_cards(call)
            elif callback_data.startswith("add_"):
                self._handle_add_card(call)
            elif callback_data.startswith("remove_"):
                self._handle_remove_card(call)
            elif callback_data.startswith("show_"):
                self._handle_show_cards(call)

            # –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            elif callback_data == "start_game":
                self._handle_start_game(call)
            elif callback_data == "leave_game":
                self._handle_leave_game(call)
            elif callback_data == "show_players":
                self._handle_show_players(call)
            elif callback_data == "game_settings":
                self._handle_game_settings(call)

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            elif callback_data.startswith("reveal_"):
                if callback_data == "reveal_special_card":
                    self._safe_answer_callback(call, "‚ùå –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–ª—å–∑—è —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å", show_alert=True)
                else:
                    self._handle_reveal_card(call)
            elif callback_data == "use_special_card":
                self._handle_use_special_card(call)
            elif callback_data == "show_my_character":
                self._handle_show_character(call)
            elif callback_data == "show_game_players":
                self._handle_show_game_players(call)

            # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            elif callback_data == "start_voting":
                self._handle_start_voting(call)
            elif callback_data.startswith("vote_"):
                if callback_data == "vote_abstain":
                    self._handle_abstain(call)
                else:
                    self._handle_vote(call)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            elif callback_data.startswith("confirm_"):
                self._handle_confirm(call)
            elif callback_data.startswith("cancel_"):
                self._handle_cancel(call)

            # –ù–∞–∑–∞–¥
            elif callback_data == "back":
                self._handle_back(call)

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            self._safe_answer_callback(call)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
            self._safe_answer_callback(call, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def _safe_answer_callback(self, call: CallbackQuery, text: str = None, show_alert: bool = False):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback"""
        try:
            self.bot.answer_callback_query(call.id, text, show_alert)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è): {e}")

    def _safe_edit_message(self, chat_id: int, message_id: int, text: str, reply_markup=None, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.bot.edit_message_text(
                text,
                chat_id,
                message_id,
                reply_markup=reply_markup,
                **kwargs
            )
            return True
        except Exception as e:
            if "message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def text_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = message.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                state = self.user_states[user_id]

                if state.get('action') == 'add_card':
                    self._process_add_card(message, state)
                elif state.get('action') == 'remove_card':
                    self._process_remove_card(message, state)
                else:
                    # –û—á–∏—â–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    del self.user_states[user_id]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ text_handler: {e}")

    def _handle_abstain_vote(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        user_id = call.from_user.id

        if not hasattr(self, 'user_states') or user_id not in self.user_states or 'voting_chat' not in self.user_states[
            user_id]:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", show_alert=True)
            return

        chat_id = self.user_states[user_id]['voting_chat']

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        game = self.game_manager.games[chat_id]
        player = game.players.get(user_id)

        if not player or not player.is_alive or player.has_voted:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", show_alert=True)
            return

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–µ–≥–æ –±–µ–∑ —Ü–µ–ª–∏
        player.has_voted = True
        player.vote_target = None

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.bot.edit_message_text(
            "‚úÖ **–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n\n–í—ã –≤–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.",
            user_id,
            call.message.message_id,
            parse_mode='Markdown'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–µ
        try:
            alive_players = game.get_alive_players()
            voted_count = sum(1 for p in alive_players if p.has_voted)
            voter_name = player.get_display_name()

            self.bot.send_message(
                chat_id,
                f"ü§ê {voter_name} –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è ({voted_count}/{len(alive_players)})"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: {e}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if 'voting_chat' in self.user_states[user_id]:
            del self.user_states[user_id]['voting_chat']
            if not self.user_states[user_id]:
                del self.user_states[user_id]

        self.bot.answer_callback_query(call.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

    def _handle_create_game(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã"""
        create_text = "üéÆ **–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã**\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /game –≤ –≥—Ä—É–ø–ø–µ.\n\n–ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö."

        keyboard = get_back_keyboard()

        self._safe_edit_message(
            call.message.chat.id,
            call.message.message_id,
            create_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

        chat_id = call.message.chat.id
        user_id = call.from_user.id
        username = call.from_user.username
        first_name = call.from_user.first_name

        if chat_id in self.game_manager.games:
            self.bot.edit_message_text(
                "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!",
                call.message.chat.id,
                call.message.message_id
            )
            return

        if self.game_manager.create_game(chat_id, user_id):
            self.game_manager.join_game(chat_id, user_id, username, first_name)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            game = self.game_manager.games[chat_id]
            game.lobby_message_id = call.message.message_id

            self._send_lobby_status(chat_id, call.message.message_id)
        else:
            self.bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã.",
                call.message.chat.id,
                call.message.message_id
            )

    def _handle_join_game(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ"""
        if call.message.chat.type not in ['group', 'supergroup']:
            self.bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!",
                call.message.chat.id,
                call.message.message_id
            )
            return

        chat_id = call.message.chat.id
        user_id = call.from_user.id
        username = call.from_user.username
        first_name = call.from_user.first_name

        if chat_id not in self.game_manager.games:
            self.bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!",
                call.message.chat.id,
                call.message.message_id
            )
            return

        try:
            self.bot.send_message(
                user_id,
                "üéÆ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –Ω–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ."
            )
        except Exception:
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ",
                show_alert=True
            )
            return

        if self.game_manager.join_game(chat_id, user_id, username, first_name):
            game = self.game_manager.games[chat_id]
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º lobby_message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(game, 'lobby_message_id') and game.lobby_message_id:
                self._send_lobby_status(chat_id, game.lobby_message_id)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                game.lobby_message_id = call.message.message_id
                self._send_lobby_status(chat_id, call.message.message_id)
        else:
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ",
                show_alert=True
            )

    def _handle_rules(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã"""
        rules_text = """üìã **–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Bunker RP:**

üéØ **–¶–µ–ª—å:** –ü–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä –ø–æ—Å–ª–µ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞

üé≠ **–•–æ–¥ –∏–≥—Ä—ã:**
1. **–õ–æ–±–±–∏** - –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ (3-8 —á–µ–ª–æ–≤–µ–∫)
2. **–ò–∑—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π** (3 –º–∏–Ω) - –∏–∑—É—á–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
3. **–û–±—Å—É–∂–¥–µ–Ω–∏–µ** (10 –º–∏–Ω) - —É–±–µ–∂–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –≤ —Å–≤–æ–µ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
4. **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ** (2 –º–∏–Ω) - –≥–æ–ª–æ—Å—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä
5. **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã** (1 –º–∏–Ω) - —É–∑–Ω–∞–π—Ç–µ, –∫–æ–≥–æ –∏—Å–∫–ª—é—á–∏–ª–∏

üé¥ **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:**
–£ –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –≤–æ–∑—Ä–∞—Å—Ç, –∑–¥–æ—Ä–æ–≤—å–µ, —Ö–æ–±–±–∏, —Ñ–æ–±–∏—è –∏ –ø—Ä–µ–¥–º–µ—Ç. –†–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏!

üèÜ **–ü–æ–±–µ–¥–∞:**
–ü–æ–±–µ–∂–¥–∞—é—Ç —Ç–µ, –∫—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –±—É–Ω–∫–µ—Ä.

üí° **–°–æ–≤–µ—Ç—ã:**
- –†–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
- –°–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏
- –£–±–µ–∂–¥–∞–π—Ç–µ –≤ —Å–≤–æ–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø—Ä–æ—Ç–∏–≤ —É–≥—Ä–æ–∑"""

        keyboard = get_back_keyboard()

        self.bot.edit_message_text(
            rules_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_about(self, call: CallbackQuery):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        about_text = """‚ÑπÔ∏è **–û –±–æ—Ç–µ Bunker RP**

ü§ñ –í–µ—Ä—Å–∏—è: 1.0
üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã –≤ –≤—ã–∂–∏–≤–∞–Ω–∏–µ

‚öôÔ∏è **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–π–º–µ—Ä—ã —Ñ–∞–∑
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤  
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø 3-8 –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–∞–≥ –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

üéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"""

        keyboard = get_back_keyboard()

        self.bot.edit_message_text(
            about_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_admin_panel(self, call: CallbackQuery):
        """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        if call.from_user.id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        admin_text = "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = get_admin_menu()

        self.bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_admin_cards(self, call: CallbackQuery):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
        if call.from_user.id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        cards_text = "üÉè **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        keyboard = get_admin_cards_keyboard()

        self.bot.edit_message_text(
            cards_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_admin_stats(self, call: CallbackQuery):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        if call.from_user.id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        active_games = len(self.game_manager.games)
        total_players = sum(len(game.players) for game in self.game_manager.games.values())

        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {active_games}
üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: {total_players}

üìù **–ö–∞—Ä—Ç–æ—á–µ–∫ –≤ –±–∞–∑–µ:**"""

        for category, cards in self.game_manager.cards_data.items():
            category_names = {
                'professions': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–π',
                'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
                'hobbies': '–•–æ–±–±–∏',
                'phobias': '–§–æ–±–∏–π',
                'items': '–ü—Ä–µ–¥–º–µ—Ç–æ–≤',
                'additional': '–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'scenarios': '–°—Ü–µ–Ω–∞—Ä–∏–µ–≤'
            }

            name = category_names.get(category, category.title())
            stats_text += f"\n‚Ä¢ {name}: {len(cards)}"

        keyboard = get_back_keyboard()

        self.bot.edit_message_text(
            stats_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_start_game(self, call: CallbackQuery):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if self.game_manager.start_game(chat_id, user_id):
            self.bot.edit_message_text(
                "üé≠ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –§–∞–∑–∞ –∏–∑—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π...",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.",
                show_alert=True
            )

    def _handle_reveal_card(self, call: CallbackQuery):
        """–†–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        user_id = call.from_user.id

        if (not hasattr(self, 'user_states') or
                user_id not in self.user_states or
                'cards_chat' not in self.user_states[user_id]):
            self._safe_answer_callback(call, "‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        chat_id = self.user_states[user_id]['cards_chat']
        card_type = call.data.replace("reveal_", "")

        if chat_id not in self.game_manager.games:
            self._safe_answer_callback(call, "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        if hasattr(game,
                   'current_turn_player_id') and game.current_turn_player_id and game.current_turn_player_id != user_id:
            current_player = game.players.get(game.current_turn_player_id)
            current_name = current_player.get_display_name() if current_player else "–¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞"
            self._safe_answer_callback(
                call,
                f"‚ùå –°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥—å {current_name}. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞!",
                show_alert=True
            )
            return

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã
        if game.phase.value == "card_reveal_1" and card_type != "profession":
            self._safe_answer_callback(
                call,
                "‚ùå –í –ø–µ—Ä–≤–æ–π —Ñ–∞–∑–µ –º–æ–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
                show_alert=True
            )
            return

        if self.game_manager.reveal_card(chat_id, user_id, card_type):
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—á–µ—Ä–µ–¥–∏ –∏–∑ –õ–°
            if hasattr(game, 'current_turn_message_id') and game.current_turn_message_id:
                try:
                    self.bot.delete_message(user_id, game.current_turn_message_id)
                    game.current_turn_message_id = None
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: {e}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä–æ–≤–æ–π —á–∞—Ç
            if chat_id in self.game_manager.games:
                game = self.game_manager.games[chat_id]
                if user_id in game.players:
                    player = game.players[user_id]
                    character = player.character

                    card_names = {
                        'profession': 'üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
                        'biology': 'üë§ –ë–∏–æ–ª–æ–≥–∏—è',
                        'health': 'ü´Å –ó–¥–æ—Ä–æ–≤—å–µ',
                        'phobia': 'üó£ –§–æ–±–∏—è',
                        'hobby': 'üéÆ –•–æ–±–±–∏',
                        'fact': 'üîé –§–∞–∫—Ç',
                        'baggage': 'üì¶ –ë–∞–≥–∞–∂'
                    }

                    card_values = {
                        'profession': character.profession,
                        'biology': f"{character.gender} {character.age} –ª–µ—Ç",
                        'health': f"{character.body_type}, {character.disease}",
                        'phobia': character.phobia,
                        'hobby': character.hobby,
                        'fact': character.fact,
                        'baggage': character.baggage
                    }

                    card_name = card_names.get(card_type, card_type)
                    card_value = card_values.get(card_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                    reveal_text = f"üé¥ {player.get_display_name()} —Ä–∞—Å–∫—Ä—ã–ª –∫–∞—Ä—Ç–æ—á–∫—É:\n"
                    reveal_text += f"**{card_name}**: {card_value}"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    self.game_manager._send_message_with_delay_and_image(
                        chat_id, reveal_text, 'card_reveal', parse_mode='Markdown'
                    )

            # –ò–ó–ú–ï–ù–ï–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            current_phase = game.phase.value
            keyboard = get_private_character_keyboard(game.players[user_id], current_phase)

            success = self._safe_edit_message(
                user_id,
                call.message.message_id,
                "üÉè **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

            if not success:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    self.bot.send_message(
                        user_id,
                        "üÉè **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è:",
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é: {e}")

            self._safe_answer_callback(call, "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞!")
        else:
            self._safe_answer_callback(call, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")

    def _handle_use_special_card(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        user_id = call.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (not hasattr(self, 'user_states') or
                user_id not in self.user_states or
                'cards_chat' not in self.user_states[user_id]):
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        chat_id = self.user_states[user_id]['cards_chat']

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        game = self.game_manager.games[chat_id]
        if user_id not in game.players:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ", show_alert=True)
            return

        player = game.players[user_id]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        result = self.game_manager.use_special_card(chat_id, user_id)

        if result["success"]:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –õ–°
            self.bot.edit_message_text(
                f"‚úÖ {result['message']}",
                user_id,
                call.message.message_id,
                parse_mode='Markdown'
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if "public_message" in result:
                try:
                    self.bot.send_message(chat_id, result["public_message"], parse_mode='Markdown')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            self.bot.answer_callback_query(call.id, "‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
        else:
            self.bot.answer_callback_query(call.id, f"‚ùå {result['message']}", show_alert=True)

    def _handle_vote(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        user_id = call.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states or 'voting_chat' not in self.user_states[user_id]:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", show_alert=True)
            return

        chat_id = self.user_states[user_id]['voting_chat']
        target_id = int(call.data.replace("vote_", ""))

        if self.game_manager.vote_player(chat_id, user_id, target_id):
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ü–µ–ª–∏
            target_name = "–∏–≥—Ä–æ–∫–∞"
            if chat_id in self.game_manager.games:
                game = self.game_manager.games[chat_id]
                if target_id in game.players:
                    target_name = game.players[target_id].get_display_name()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –õ–°
            self.bot.edit_message_text(
                f"‚úÖ **–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç!**\n\n–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤: {target_name}\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.",
                user_id,
                call.message.message_id,
                parse_mode='Markdown'
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–µ
            try:
                game = self.game_manager.games[chat_id]
                alive_players = game.get_alive_players()
                voted_count = sum(1 for p in alive_players if p.has_voted)

                voter_name = game.players[user_id].get_display_name()

                self.bot.send_message(
                    chat_id,
                    f"‚úÖ {voter_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª ({voted_count}/{len(alive_players)})"
                )
            except:
                pass

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if 'voting_chat' in self.user_states[user_id]:
                del self.user_states[user_id]['voting_chat']

            self.bot.answer_callback_query(call.id)
        else:
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å",
                show_alert=True
            )

    def _update_voting_message(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        try:
            chat_id = message.chat.id

            if chat_id not in self.game_manager.games:
                return

            game = self.game_manager.games[chat_id]

            if game.phase.value != "voting":
                return

            alive_players = game.get_alive_players()
            voted_count = sum(1 for p in alive_players if p.has_voted)

            voting_text = "üó≥Ô∏è **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\n"
            voting_text += f"–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {voted_count}/{len(alive_players)}\n\n"
            voting_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–æ–≤."

            self.bot.edit_message_text(
                voting_text,
                chat_id,
                message.message_id,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")

    def _handle_back(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        welcome_text = "üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bunker RP!**\n\n"
        welcome_text += "–≠—Ç–æ –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, "
        welcome_text += "–∫—Ç–æ –¥–æ—Å—Ç–æ–∏–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä –ø–æ—Å–ª–µ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞.\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = get_main_menu()

        if call.from_user.id in ADMIN_IDS:
            keyboard.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

        self.bot.edit_message_text(
            welcome_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_leave_game(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        if user_id not in game.players:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        if self.game_manager.leave_game(chat_id, user_id):
            player_name = game.players[user_id].get_display_name() if user_id in game.players else "–ò–≥—Ä–æ–∫"

            self.bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É")

            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–¥–º–∏–Ω –∏–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤
            if user_id == game.admin_id or len(game.players) < GAME_SETTINGS['MIN_PLAYERS']:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
                self.game_manager.phase_timer.stop_phase_timer(chat_id)
                del self.game_manager.games[chat_id]
                self._send_message_with_image(chat_id, "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤." 'game_end')
            else:
                self.bot.send_message(chat_id, f"üëã {player_name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É")
                self._send_lobby_status(chat_id)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã")

    def _handle_show_players(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"""
        chat_id = call.message.chat.id

        players_info = self.game_manager.get_players_list(chat_id)

        if players_info:
            self.bot.answer_callback_query(call.id, players_info, show_alert=True)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–∞—Ö", show_alert=True)

    def _handle_game_settings(self, call: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        if user_id != game.admin_id:  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å game.ADMIN_IDS –Ω–∞ game.admin_id
            self.bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
            return

        settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:**
            
                ‚è±Ô∏è –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {GAME_SETTINGS['ROLE_STUDY_TIME']}—Å
                üí¨ –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {GAME_SETTINGS['DISCUSSION_TIME']}—Å  
                üó≥Ô∏è –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {GAME_SETTINGS['VOTING_TIME']}—Å
                üìä –í—Ä–µ–º—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {GAME_SETTINGS['RESULTS_TIME']}—Å
            
                üë• –ú–∏–Ω. –∏–≥—Ä–æ–∫–æ–≤: {GAME_SETTINGS['MIN_PLAYERS']}
                üë• –ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤: {GAME_SETTINGS['MAX_PLAYERS']}"""

        self.bot.answer_callback_query(call.id, settings_text, show_alert=True)

    def _handle_show_character(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        if user_id not in game.players:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ", show_alert=True)
            return

        player = game.players[user_id]
        character_info = player.get_character_info(show_all=True)

        if character_info:
            self.bot.answer_callback_query(call.id, f"üë§ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:\n\n{character_info}", show_alert=True)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω", show_alert=True)

    def _handle_manage_cards(self, call: CallbackQuery):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –õ–°"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        if user_id not in game.players:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°
        try:
            self._send_cards_menu_to_private(user_id, chat_id)
            self.bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –õ–°: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start")

    def _handle_show_game_players(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ —Å –∏—Ö —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
        chat_id = call.message.chat.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        players_text = "üë• **–ò–≥—Ä–æ–∫–∏ –∏ –∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∏:**\n\n"

        for player in game.players.values():
            status = "üíö" if player.is_alive else "üíÄ"
            admin_mark = "üëë" if player.is_admin else "üë§"

            players_text += f"{admin_mark} {status} **{player.get_display_name()}**\n"
            players_text += player.get_character_info(show_all=False) + "\n\n"

        self.bot.answer_callback_query(call.id, players_text, show_alert=True)

    def _handle_start_voting(self, call: CallbackQuery):
        """–ù–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –õ–°"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
        if game.phase.value != "voting":
            self.bot.answer_callback_query(call.id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∂–∏–≤
        if user_id not in game.players or not game.players[user_id].is_alive:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
        if game.players[user_id].has_voted:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –õ–°
        try:
            self._send_voting_to_private(user_id, chat_id)
            self.bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°, –≥–æ–ª–æ—Å—É–µ–º –≤ –≥—Ä—É–ø–ø–µ
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –õ–°: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start")

    def _send_voting_to_private(self, user_id: int, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –õ–°"""
        if chat_id not in self.game_manager.games:
            return

        game = self.game_manager.games[chat_id]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∏–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ)
        alive_players = [p for p in game.get_alive_players() if p.user_id != user_id]

        if not alive_players:
            self.bot.send_message(user_id, "‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
            return

        keyboard = get_voting_keyboard(alive_players, user_id)

        voting_text = f"üó≥Ô∏è **–ì–û–õ–û–°–û–í–ê–ù–ò–ï** (–ß–∞—Ç: {chat_id})\n\n"
        voting_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ **–ò–°–ö–õ–Æ–ß–ò–¢–¨** –∏–∑ –±—É–Ω–∫–µ—Ä–∞:\n\n"

        for player in alive_players:
            voting_text += f"üë§ {player.get_display_name()}\n"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_states –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not hasattr(self, 'user_states'):
            self.user_states = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['voting_chat'] = chat_id

        self.bot.send_message(
            user_id,
            voting_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_abstain(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        user_id = call.from_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_states –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not hasattr(self, 'user_states'):
            self.user_states = {}

        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states or 'voting_chat' not in self.user_states[user_id]:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", show_alert=True)
            return

        chat_id = self.user_states[user_id]['voting_chat']

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        if user_id not in game.players:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ", show_alert=True)
            return

        player = game.players[user_id]

        if not player.is_alive:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", show_alert=True)
            return

        if player.has_voted:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏", show_alert=True)
            return

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–µ–≥–æ, –Ω–æ –±–µ–∑ —Ü–µ–ª–∏
        player.has_voted = True
        player.vote_target = None

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –õ–°
        self.bot.edit_message_text(
            f"‚úÖ **–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n\n–í—ã –≤–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.",
            user_id,
            call.message.message_id,
            parse_mode='Markdown'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–µ
        try:
            alive_players = game.get_alive_players()
            voted_count = sum(1 for p in alive_players if p.has_voted)
            voter_name = player.get_display_name()

            self.bot.send_message(
                chat_id,
                f"ü§ê {voter_name} –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è ({voted_count}/{len(alive_players)})"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: {e}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in self.user_states and 'voting_chat' in self.user_states[user_id]:
            del self.user_states[user_id]['voting_chat']
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            if not self.user_states[user_id]:
                del self.user_states[user_id]

        self.bot.answer_callback_query(call.id)

    def _handle_confirm(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        action = call.data.replace("confirm_", "")

        if action == "leave_game":
            self._handle_leave_game(call)
        elif action == "stop_game":
            self._handle_stop_game_confirm(call)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    def _handle_cancel(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
        self.bot.answer_callback_query(call.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
        chat_id = call.message.chat.id

        if chat_id in self.game_manager.games:
            game = self.game_manager.games[chat_id]
            keyboard = get_game_phase_keyboard(game.phase.value)

            try:
                self.bot.edit_message_text(
                    "üéÆ –ò–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
                    chat_id,
                    call.message.message_id,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                self.bot.send_message(
                    chat_id,
                    "üéÆ –ò–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
                    reply_markup=keyboard
                )
        else:
            self._handle_back(call)

    def _handle_edit_cards(self, call: CallbackQuery):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        if call.from_user.id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        category = call.data.replace("edit_", "")

        category_names = {
            'professions': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏',
            'biology': '–ë–∏–æ–ª–æ–≥–∏—è',
            'health_body': '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
            'health_disease': '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
            'phobias': '–§–æ–±–∏–∏',
            'hobbies': '–•–æ–±–±–∏',
            'facts': '–§–∞–∫—Ç—ã',
            'baggage': '–ë–∞–≥–∞–∂',
            'special_cards': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏',
            'scenarios': '–°—Ü–µ–Ω–∞—Ä–∏–∏'
        }

        category_name = category_names.get(category, category)
        cards_count = len(self.game_manager.cards_data.get(category, []))

        edit_text = f"üÉè **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {category_name}**\n\n"
        edit_text += f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {cards_count}\n\n"

        if category in ['biology', 'health_body', 'health_disease']:
            edit_text += "‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –≤–µ—Å–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç, –≤–µ—Å)\n\n"

        edit_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = get_card_edit_keyboard(category)

        try:
            self.bot.edit_message_text(
                edit_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é")

    def _handle_add_card(self, call: CallbackQuery):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if call.from_user.id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        category = call.data.replace("add_", "")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_states –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not hasattr(self, 'user_states'):
            self.user_states = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[call.from_user.id] = {
            'action': 'add_card',
            'category': category,
            'message_id': call.message.message_id,
            'chat_id': call.message.chat.id
        }

        category_names = {
            'professions': '–ø—Ä–æ—Ñ–µ—Å—Å–∏—é',
            'health': '—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è',
            'hobbies': '—Ö–æ–±–±–∏',
            'phobias': '—Ñ–æ–±–∏—é',
            'items': '–ø—Ä–µ–¥–º–µ—Ç',
            'additional': '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            'scenarios': '—Å—Ü–µ–Ω–∞—Ä–∏–π'
        }

        category_name = category_names.get(category, category)

        try:
            self.bot.edit_message_text(
                f"‚úèÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n–ù–∞–ø–∏—à–∏—Ç–µ {category_name}, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            self.bot.answer_callback_query(call.id, f"–ù–∞–ø–∏—à–∏—Ç–µ {category_name} –≤ —á–∞—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é")

    def _handle_edit_special_cards(self, call: CallbackQuery):  # new
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
        if call.from_user.id != ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        special_cards = get_special_cards()

        edit_text = f"üÉè **–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏** ({len(special_cards)} —à—Ç.)\n\n"
        edit_text += "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥.\n\n"
        edit_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_special"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="remove_special")
        )
        keyboard.add(InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_special"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_cards"))

        self.bot.edit_message_text(
            edit_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    def _handle_add_special_card(self, call: CallbackQuery):  # new
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        self.user_states[call.from_user.id] = {
            'action': 'add_special_card',
            'stage': 'name',  # name -> description -> code
            'chat_id': call.message.chat.id,
            'message_id': call.message.message_id
        }

        self.bot.edit_message_text(
            "‚úèÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )

    def _handle_remove_card(self, call: CallbackQuery):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if call.from_user.id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        category = call.data.replace("remove_", "")
        cards = self.game_manager.cards_data.get(category, [])

        if not cards:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_states –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not hasattr(self, 'user_states'):
            self.user_states = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[call.from_user.id] = {
            'action': 'remove_card',
            'category': category,
            'message_id': call.message.message_id,
            'chat_id': call.message.chat.id
        }

        cards_text = f"‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n–¢–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:\n\n"
        for i, card in enumerate(cards[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            cards_text += f"{i}. {card}\n"

        if len(cards) > 20:
            cards_text += f"\n... –∏ –µ—â–µ {len(cards) - 20} –∫–∞—Ä—Ç–æ—á–µ–∫"

        cards_text += f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

        try:
            self.bot.edit_message_text(
                cards_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            self.bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é")

    def _handle_show_cards(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if call.from_user.id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        category = call.data.replace("show_", "")
        cards = self.game_manager.cards_data.get(category, [])

        category_names = {
            'professions': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏',
            'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
            'hobbies': '–•–æ–±–±–∏',
            'phobias': '–§–æ–±–∏–∏',
            'items': '–ü—Ä–µ–¥–º–µ—Ç—ã',
            'additional': '–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'scenarios': '–°—Ü–µ–Ω–∞—Ä–∏–∏'
        }

        category_name = category_names.get(category, category)

        if not cards:
            self.bot.answer_callback_query(call.id, f"‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}", show_alert=True)
            return

        cards_text = f"üÉè **{category_name}** ({len(cards)} —à—Ç.)\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 30 –∫–∞—Ä—Ç–æ—á–µ–∫
        for i, card in enumerate(cards[:30], 1):
            cards_text += f"{i}. {card}\n"

        if len(cards) > 30:
            cards_text += f"\n... –∏ –µ—â–µ {len(cards) - 30} –∫–∞—Ä—Ç–æ—á–µ–∫"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è callback answer
        if len(cards_text) > 200:
            cards_text = cards_text[:200] + "..."

        self.bot.answer_callback_query(call.id, cards_text, show_alert=True)

    def _process_add_card(self, message: Message, state: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            category = state['category']
            card_text = message.text.strip()

            if len(card_text) < 2:
                self.bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏")
                return

            if len(card_text) > 100:
                self.bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            if self.game_manager.add_card(category, card_text):
                self.bot.send_message(message.chat.id, f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                self._return_to_card_edit_menu(state, category)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if message.from_user.id in self.user_states:
                del self.user_states[message.from_user.id]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")

    def _process_remove_card(self, message: Message, state: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            category = state['category']
            card_text = message.text.strip()

            # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            if self.game_manager.remove_card(category, card_text):
                self.bot.send_message(message.chat.id, f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_text}' —É–¥–∞–ª–µ–Ω–∞!")
            else:
                self.bot.send_message(message.chat.id, f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self._return_to_card_edit_menu(state, category)

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if message.from_user.id in self.user_states:
                del self.user_states[message.from_user.id]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")

    def _return_to_card_edit_menu(self, state: dict, category: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"""
        try:
            category_names = {
                'professions': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏',
                'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
                'hobbies': '–•–æ–±–±–∏',
                'phobias': '–§–æ–±–∏–∏',
                'items': '–ü—Ä–µ–¥–º–µ—Ç—ã',
                'additional': '–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'scenarios': '–°—Ü–µ–Ω–∞—Ä–∏–∏'
            }

            category_name = category_names.get(category, category)
            cards_count = len(self.game_manager.cards_data.get(category, []))

            edit_text = f"üÉè **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {category_name}**\n\n"
            edit_text += f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {cards_count}\n\n"
            edit_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            keyboard = get_card_edit_keyboard(category)

            self.bot.edit_message_text(
                edit_text,
                state['chat_id'],
                state['message_id'],
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def _handle_stop_game_confirm(self, call: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–∞–¥–º–∏–Ω –∏–≥—Ä—ã –∏–ª–∏ –±–æ—Ç–∞)
        if user_id != game.admin_id and user_id not in ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã", show_alert=True)
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if hasattr(self.game_manager, 'phase_timer'):
            self.game_manager.phase_timer.stop_phase_timer(chat_id)

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        del self.game_manager.games[chat_id]

        try:
            self.bot.edit_message_text(
                "‚õî –ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                chat_id,
                call.message.message_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self._send_message_with_image(chat_id, "‚õî –ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º." 'game_end')

        self.bot.answer_callback_query(call.id, "‚úÖ –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def _handle_show_vote_results(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = call.message.chat.id

        if chat_id not in self.game_manager.games:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã", show_alert=True)
            return

        game = self.game_manager.games[chat_id]

        if game.phase.value != "voting" and game.phase.value != "results":
            self.bot.answer_callback_query(call.id, "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return

        alive_players = game.get_alive_players()
        voted_count = sum(1 for p in alive_players if p.has_voted)

        results_text = f"üìä **–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:**\n\n"
        results_text += f"–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {voted_count}/{len(alive_players)}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–ª (–µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        if game.phase.value == "results":
            vote_counts = {}
            for player in alive_players:
                if player.vote_target and player.vote_target in game.players:
                    target = game.players[player.vote_target]
                    if target.user_id not in vote_counts:
                        vote_counts[target.user_id] = 0
                    vote_counts[target.user_id] += 1

            results_text += "**–ì–æ–ª–æ—Å–∞ –ø—Ä–æ—Ç–∏–≤:**\n"
            for user_id, votes in sorted(vote_counts.items(), key=lambda x: x[1], reverse=True):
                player = game.players[user_id]
                results_text += f"‚Ä¢ {player.get_display_name()}: {votes} –≥–æ–ª–æ—Å(–æ–≤)\n"
        else:
            results_text += "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è callback answer
        if len(results_text) > 200:
            results_text = results_text[:200] + "..."

        self.bot.answer_callback_query(call.id, results_text, show_alert=True)

    def _send_lobby_status(self, chat_id: int, edit_message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–æ–±–±–∏"""
        try:
            if chat_id not in self.game_manager.games:
                return

            game = self.game_manager.games[chat_id]

            lobby_text = "üéÆ **–õ–æ–±–±–∏ –∏–≥—Ä—ã**\n\n"
            lobby_text += f"üëë –ê–¥–º–∏–Ω: {game.players[game.admin_id].get_display_name()}\n"
            lobby_text += f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{GAME_SETTINGS['MAX_PLAYERS']}\n\n"

            lobby_text += "**–ò–≥—Ä–æ–∫–∏:**\n"
            for i, player in enumerate(game.players.values(), 1):
                status = "üëë" if player.is_admin else "üë§"
                lobby_text += f"{i}. {status} {player.get_display_name()}\n"

            if game.can_start():
                lobby_text += f"\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
            else:
                min_players = GAME_SETTINGS['MIN_PLAYERS']
                lobby_text += f"\n‚è≥ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players} –∏–≥—Ä–æ–∫–æ–≤"

            is_admin = game.admin_id in game.players  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            keyboard = get_game_lobby_keyboard(is_admin=is_admin)

            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω message_id, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if edit_message_id:
                try:
                    self.bot.edit_message_text(
                        lobby_text,
                        chat_id,
                        edit_message_id,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                    return edit_message_id
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–±–±–∏: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.bot.send_message(
                chat_id,
                lobby_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–≥—Ä–µ
            game.lobby_message_id = message.message_id
            return message.message_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–±–±–∏: {e}")

    # –í –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback'–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ:
    # elif callback_data == "show_vote_results":
    #     self._handle_show_vote_results(call)
